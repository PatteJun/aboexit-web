---
import Layout from '../../../../layouts/Layout.astro';
import CancellationLetter from '../../../../components/CancellationLetter.astro';
import { getProviderBySlug, getAllProviders } from '../../../../lib/api';
import { languages, ui } from '../../../../i18n/ui';

export async function getStaticPaths() {
  const paths = await Promise.all(
    Object.keys(languages).map(async (lang) => {
      const providers = await getAllProviders(lang);
      return providers.map((provider) => ({
        params: { 
          lang, 
          category: provider.category.slug,
          provider: provider.slug 
        },
        props: { lang, provider },
      }));
    })
  );
  return paths.flat();
}

const { provider, lang } = Astro.props;
const t = ui[lang] || ui['en'];
---

<Layout 
  title={provider.metaTitle}
  description={provider.metaDescription}
  lang={lang}
>
  <div class="hero-wrapper">
    <div class="container">
      <nav class="breadcrumb">
        <a href={`/${lang}`}>{t['nav.home']}</a>
        <span>/</span>
        <span>{provider.category.name}</span>
        <span>/</span>
        <span>{provider.name}</span>
      </nav>

      <div class="hero">
        <div class="hero-content">
          <h1>{t['cancel.hero.title'].replace('{provider}', provider.name)}</h1>
          <p class="subtitle">{t['cancel.hero.subtitle']}</p>
          
          <div class="benefits">
            <div class="benefit">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
              </svg>
              <span>{t['cancel.benefit.free']}</span>
            </div>
            <div class="benefit">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
              </svg>
              <span>{t['cancel.benefit.quick']}</span>
            </div>
            <div class="benefit">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
              </svg>
              <span>{t['cancel.benefit.legal']}</span>
            </div>
          </div>

          <button class="cta-button">
            {t['cancel.cta']}
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="arrow">
              <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 8.25L21 12m0 0l-3.75 3.75M21 12H3" />
            </svg>
          </button>
        </div>

        <div class="letter-preview">
          <div class="letter-content">
            <div class="letter-header">
              <div class="sender">
                Max Mustermann<br />
                Musterstraße 123<br />
                12345 Musterstadt
              </div>
              <div class="recipient">
                {provider.address.split('\n').map((line) => (
                  <div>{line}</div>
                ))}
              </div>
            </div>
            <div class="letter-body">
              <div class="date" data-dynamic-date></div>
              <div class="subject">Kündigung meines Vertrags</div>
              <p>Sehr geehrte Damen und Herren,</p>
              <p>hiermit kündige ich meinen Vertrag bei {provider.name} fristgerecht zum nächstmöglichen Termin...</p>
            </div>
          </div>
          <div class="letter-overlay"></div>
        </div>
      </div>
    </div>
  </div>

  <div class="container">
    <article class="content">
      <section class="letter-section">
        <h2>{t['cancel.template.title']}</h2>
        <CancellationLetter provider={provider} lang={lang} />
      </section>

      <section class="instructions">
        <h2>{t['cancel.how.title']}</h2>
        <div class="steps">
          <div class="step">
            <div class="step-number">1</div>
            <div class="step-content">
              <h3>{t['cancel.step.1.title']}</h3>
              <p>{t['cancel.step.1.description']}</p>
            </div>
          </div>
          <div class="step">
            <div class="step-number">2</div>
            <div class="step-content">
              <h3>{t['cancel.step.2.title']}</h3>
              <p>{t['cancel.step.2.description']}</p>
            </div>
          </div>
          <div class="step">
            <div class="step-number">3</div>
            <div class="step-content">
              <h3>{t['cancel.step.3.title']}</h3>
              <p>{t['cancel.step.3.description']}</p>
            </div>
          </div>
        </div>
      </section>

      <section class="faq">
        <h2>{t['cancel.faq.title']}</h2>
        <div class="questions">
          <details>
            <summary>{t['cancel.faq.period.question']}</summary>
            <p>{t['cancel.faq.period.answer']}</p>
          </details>
          <details>
            <summary>{t['cancel.faq.reason.question']}</summary>
            <p>{t['cancel.faq.reason.answer']}</p>
          </details>
          <details>
            <summary>{t['cancel.faq.confirmation.question']}</summary>
            <p>{t['cancel.faq.confirmation.answer']}</p>
          </details>
        </div>
      </section>
    </article>
  </div>
</Layout>

<script>
  import { initializeDynamicDates } from '../../../../utils/dateFormatter';

  document.addEventListener('DOMContentLoaded', () => {
    const lang = document.documentElement.lang;
    initializeDynamicDates(lang);
  });
</script>

<style>
  .hero-wrapper {
    background: linear-gradient(to bottom, #f0f9ff, #e0f2fe);
    padding: 4rem 0;
    margin-bottom: 3rem;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .breadcrumb {
    margin-bottom: 2rem;
    color: var(--text-light);
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .breadcrumb a {
    color: var(--primary-color);
    text-decoration: none;
  }

  .hero {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: center;
  }

  .hero-content {
    max-width: 600px;
  }

  h1 {
    font-size: 3rem;
    font-weight: 700;
    color: var(--text-color);
    margin-bottom: 1.5rem;
    line-height: 1.1;
  }

  .subtitle {
    font-size: 1.25rem;
    color: var(--text-light);
    margin-bottom: 2rem;
  }

  .benefits {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .benefit {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: var(--text-color);
    font-weight: 500;
  }

  .icon {
    width: 1.5rem;
    height: 1.5rem;
    color: var(--primary-color);
  }

  .cta-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--primary-color);
    color: white;
    padding: 1rem 2rem;
    border-radius: 0.5rem;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .cta-button:hover {
    background: var(--primary-dark);
    transform: translateY(-1px);
  }

  .arrow {
    width: 1.25rem;
    height: 1.25rem;
  }

  .letter-preview {
    background: white;
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: var(--shadow-lg);
    position: relative;
    overflow: hidden;
    transform: rotate(2deg);
  }

  .letter-content {
    font-family: 'Times New Roman', serif;
    color: var(--text-color);
    font-size: 0.875rem;
  }

  .letter-header {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .letter-body {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .date {
    text-align: right;
    color: var(--text-light);
  }

  .subject {
    font-weight: bold;
    margin-bottom: 1rem;
  }

  .letter-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 150px;
    background: linear-gradient(to bottom, transparent, white);
  }

  .content {
    max-width: 800px;
    margin: 0 auto;
  }

  .letter-section {
    margin: 3rem 0;
  }

  .letter-section h2 {
    font-size: 1.5rem;
    margin-bottom: 2rem;
  }

  .instructions {
    margin: 4rem 0;
  }

  .instructions h2 {
    font-size: 1.5rem;
    margin-bottom: 2rem;
  }

  .steps {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .step {
    display: flex;
    gap: 1.5rem;
  }

  .step-number {
    background: var(--primary-color);
    color: var(--white);
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    flex-shrink: 0;
  }

  .step-content h3 {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
  }

  .faq {
    margin: 4rem 0;
  }

  .faq h2 {
    font-size: 1.5rem;
    margin-bottom: 2rem;
  }

  .questions details {
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    padding: 1.25rem;
    margin-bottom: 1rem;
  }

  .questions summary {
    font-weight: 500;
    cursor: pointer;
    list-style: none;
  }

  .questions p {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--border-color);
  }

  @media (max-width: 768px) {
    .hero {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .hero-content {
      text-align: center;
    }

    .benefits {
      align-items: center;
    }

    h1 {
      font-size: 2rem;
    }

    .letter-preview {
      transform: none;
    }
  }
</style>